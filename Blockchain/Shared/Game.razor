@namespace Blockchain.Shared

@switch (GameState)
{
    case GameState.Started:
        <ScoreKeeper GameState="@GameState" @ref="scoreKeeper"/>
        <h5>Next: @NextNumber.ToString()</h5>
        <h5>Current: @CurrentLink?.DisplayNumber</h5>
        break;

    case GameState.NotStarted:
        <button @onclick="Start">Start Game</button>
        break;

    case GameState.GameOver:
        <ScoreKeeper GameState="@GameState" @ref="scoreKeeper"/>
        <h5>Game Over</h5>
        <button @onclick="Start">Start Game</button>
        break;

    default:
        throw new ArgumentOutOfRangeException();
}

<div @onkeydown="KeyDown" @ref="gameBoardDiv" tabindex="0">
    <table class="table">
        <thead>
        <tr>
            @for (var i = 0; i <= Cells.GetLength(0); i++)
            {
                if (CurrentLink?.Column == i && CurrentLink?.Row == 7)
                {
                    <th scope="col">@CurrentLink.DisplayNumber</th>
                }
                else
                {
                    <th scope="col"></th>
                }
            }
        </tr>
        </thead>

        <tbody>
        @* Loop through rows top to bottom *@
        @for (var i = Cells.GetLength(0) - 1; i >= 0; i--)
        {
            @* Loop through columns left to right *@
            <tr>
                @for (var j = 0; j <= Cells.GetUpperBound(1); j++)
                {
                    @if (Cells[i, j]?.Number is not null)
                    {
                        <ChainLink Number="@Cells[i, j]?.Number" Scored="@Cells[i, j]?.Scored"/>
                    }
                    else
                    {
                        <ChainLink Number="0"/>
                    }
                }
            </tr>
        }
        </tbody>
    </table>
</div>